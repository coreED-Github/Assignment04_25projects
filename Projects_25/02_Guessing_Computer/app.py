# -*- coding: utf-8 -*-
"""another-copy-of-project-02_-guessing-number.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/coreED-Github/a596d94aca04b1c307ccdd8e72d380f4/another-copy-of-project-02_-guessing-number.ipynb

**1. Importing Necessary Libraries**

The random library is imported to generate random numbers, and the time library is used to calculate the time taken for the game.

**2. Defining the get_number Function**

This function accepts a difficulty level as an argument:

For easy, it generates a random number between 1 and 10.

For medium, it generates a random number between 1 and 50.

For hard, it generates a random number between 1 and 100.


This function returns the generated random number based on the chosen difficulty.

**3. Defining the get_hint Function**

This function provides hints about the randomly generated number:

If the number is even, it gives a hint saying "The number is even."

If the number is odd, it gives a hint saying "The number is odd."

If the number is a multiple of 5, it adds a hint saying "It is a multiple of 5."

Based on the value of the number, it provides a hint whether it is greater than or less than 50.


It randomly selects one of the hints to provide to the player.

**4. Defining the guess_game Function**

This function starts the game, handles user input, and runs the main game loop:

The user is welcomed and prompted to choose a difficulty level.

The get_number function is called to generate a random number based on the selected difficulty.

The game starts with 7 lives and allows up to 7 guesses.

The userâ€™s guess is compared to the generated number:

If the guess is too low or too high, the user is prompted to try again.

If the guess is correct, the user is congratulated, and the game ends with the number of attempts and time taken.


If the user runs out of lives without guessing correctly, the game ends with a "Game Over" message.

A hint is provided when the user reaches 4 lives remaining if they choose to receive one.

The game gives the option to play again once it ends.


**5. Error Handling**

The game ensures that only valid integer inputs are accepted from the user. If the user enters an invalid input (non-numeric), it catches the exception and prompts them to enter a valid number.

**6. Main Game Loop**

The guess_game function calls itself again if the user chooses to play another round, allowing for repeated gameplay. If the user chooses not to play again, the game ends with a farewell message.
"""

import random
import time

def get_number(level):
    if level == "easy":
        return random.randint(1, 10)
    elif level == "medium":
        return random.randint(1, 50)
    else:
        return random.randint(1, 100)

def get_hint(number):
    hints = []
    if number % 2 == 0:
        hints.append("The number is even.")
    else:
        hints.append("The number is odd.")
    if number % 5 == 0:
        hints.append("It is a multiple of 5.")
    if number > 50:
        hints.append("It is greater than 50.")
    elif number < 50:
        hints.append("It is less than 50.")
    return random.choice(hints)

def guess_game():
    print("Welcome to the Guess the Number Game!")
    print("Choose a difficulty level:")
    print("1. Easy (1-10)")
    print("2. Medium (1-50)")
    print("3. Hard (1-100)")

    choice = input("Enter your choice (easy/medium/hard): ").lower()
    number = get_number(choice)
    lives = 7
    attempts = 0
    hint_given = False

    start_time = time.time()

    while lives > 0:
        try:
            guess = int(input(f"\nGuess the number (Lives left: {lives}): "))
            attempts += 1

            if guess < number:
                print("Too low! Try again.")
            elif guess > number:
                print("Too high! Try again.")
            else:
                end_time = time.time()
                print(f"\nCongratulations! You guessed the number {number} correctly.")
                print(f"Total Attempts: {attempts}")
                print(f"Time Taken: {round(end_time - start_time, 2)} seconds")
                break

            lives -= 1

            if lives == 4 and not hint_given:
                want_hint = input("Do you want a hint? (y/n): ").lower()
                if want_hint == 'y':
                    print("Hint:", get_hint(number))
                    hint_given = True

        except ValueError:
            print("Invalid input! Please enter a number.")

    if lives == 0:
        print(f"\nGame Over! The correct number was {number}.")

    again = input("\nDo you want to play again? (y/n): ").lower()
    if again == 'y':
        guess_game()
    else:
        print("Thanks for playing! Goodbye.")
guess_game()